version: '2.1'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Default topic retention settings
      KAFKA_LOG_RETENTION_HOURS: 1        # 7 days (default)
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server=kafka:29092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  postgres:
    image: debezium/postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "15432:5432"
    volumes:
      - ./sql/init-orders.sql:/docker-entrypoint-initdb.d/init-orders.sql
      - ./sql/init-results.sql:/docker-entrypoint-initdb.d/init-results.sql
    healthcheck:
      test: pg_isready -U postgres -d orders
      interval: 10s
      timeout: 5s
      retries: 5

  kowl:
    image: quay.io/cloudhut/kowl:v1.3.1
    restart: on-failure
    container_name: kowl
    ports:
        - "8082:8080"
    depends_on:
        - kafka
    environment:
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_SCHEMAREGISTRY_ENABLED: "true"
      KAFKA_SCHEMAREGISTRY_URLS: "http://schema-registry:8081"

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.2.0
    hostname: kafka-connect
    container_name: kafka-connect
    depends_on:
      - postgres
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_PORT: "8083"
      CONNECT_LISTENERS: "http://kafka-connect:8083"
      CONNECT_GROUP_ID: "kafka-connect-group1"
      CONNECT_CONFIG_STORAGE_TOPIC: "_kafka_connect_group1-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_kafka_connect_group1-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_kafka_connect_group1-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      -  ./connect:/kafka/connect/config
    command: >
      bash -c '
        echo "Installing connector plugins"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:1.5.0
        
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        
        echo "Waiting for Kafka Connect to start listening on kafka-connect:8083 ⏳"
        sleep 60
        
        echo "Checking if Kafka Connect is ready..."
        CONNECT_READY=0
        for i in {1..5}; do
          STATUS=$$(curl -s -o /dev/null -w "%{http_code}" http://kafka-connect:8083)
          if [ $$STATUS -eq 200 ]; then
            CONNECT_READY=1
            break
          fi
          echo "Kafka Connect not ready yet (status: $$STATUS), waiting 10 seconds..."
          sleep 10
        done
        
        if [ $$CONNECT_READY -eq 0 ]; then
          echo "Kafka Connect did not become ready in time. Skipping connector creation."
          sleep infinity
          exit 1
        fi
        
        echo -e "\n--\n+> Creating Kafka Connect source"
        curl -v -X POST -H "Accept:application/json" \
            -H "Content-Type:application/json" \
            http://kafka-connect:8083/connectors \
            -d @/kafka/connect/config/postgres-connector.json
            
        sleep infinity'
    healthcheck:
      test: ["CMD", "curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", "http://kafka-connect:8083"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/preload.json:/data/preload.json
    command: redis-server

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: kafka-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    depends_on:
      - kafka
      - kafka-connect
      - schema-registry